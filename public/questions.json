[
  {
    "id": 1,
    "category": "SRE",
    "question": "あなたのチームは、ユーザー向けWebサービスのレイテンシに関するSLOを99% (月間) と定めています。今月、予期せぬトラフィック急増により、このSLOを下回ってしまいました。インシデントのポストモーテムにおいて、チームが最も注力すべきことは何ですか？",
    "options": {
      "A": "SLO違反の原因となった担当者を特定し、責任を明確にする。",
      "B": "SLOの目標値を現実的なレベル (例: 95%) に引き下げる。",
      "C": "インシデントの根本原因を特定し、具体的な再発防止策を立案・実行する。",
      "D": "トラフィック急増時にもSLOを達成できるよう、インフラコストを大幅に増やす。"
    },
    "answer": "C",
    "explanation": "ポストモーテムの最も重要な目的は、非難することなくインシデントから学び、将来の再発を防ぐことです。"
  },
  {
    "id": 2,
    "category": "SRE",
    "question": "新しいマイクロサービスのSLIとして「リクエスト成功率」を採用することにしました。このSLIを測定するために、どのGoogle Cloudサービスを主に使用しますか？",
    "options": {
      "A": "Cloud Build",
      "B": "Cloud Logging",
      "C": "Cloud Monitoring",
      "D": "Artifact Registry"
    },
    "answer": "C",
    "explanation": "Cloud Monitoringは、システムの指標（メトリクス）を収集、可視化、アラート設定するためのサービスです。"
  },
  {
    "id": 11,
    "category": "SRE",
    "question": "サービスのSLOが99.9%で、期間が30日間の場合、許容されるダウンタイム（エラーバジェット）は合計で約何分ですか？",
    "options": { "A": "約10分", "B": "約43分", "C": "約86分", "D": "約1時間" },
    "answer": "B",
    "explanation": "エラーバジェットは (1 - SLO) * 期間 で計算されます。(1 - 0.999) * 30 * 24 * 60 = 43.2分。"
  },
  {
    "id": 12,
    "category": "SRE",
    "question": "SREの文脈における「トイル(Toil)」の最も適切な説明はどれですか？",
    "options": {
      "A": "システムの信頼性を向上させるための創造的な作業。",
      "B": "手作業で、繰り返し行われ、自動化可能で、戦術的で、価値が増加しない作業。",
      "C": "インシデント発生時に行われる緊急対応作業。",
      "D": "新しい機能を開発し、リリースするプロセス。"
    },
    "answer": "B",
    "explanation": "トイルは、SREが削減を目指す運用上の非効率な作業を指します。"
  },
  {
    "id": 3,
    "category": "CI/CD",
    "question": "あなたはCloud Buildを使用してコンテナイメージをビルドし、Artifact RegistryにプッシュするCIパイプラインを構築しています。セキュリティ要件として、特定の脆弱性スキャンをパスしたイメージのみが本番環境にデプロイされるようにしたいと考えています。どのGoogle Cloudサービスを組み合わせるのが最も適切ですか？",
    "options": {
      "A": "Cloud Build と Cloud Functions",
      "B": "Cloud Build, Artifact Registry (脆弱性スキャン), Binary Authorization",
      "C": "Cloud Build と Cloud Deploy",
      "D": "Cloud Build と Security Command Center"
    },
    "answer": "B",
    "explanation": "Artifact Registryには脆弱性スキャン機能があり、Binary Authorizationはポリシーに基づいてデプロイを制御します。"
  },
  {
    "id": 4,
    "category": "CI/CD",
    "question": "本番環境への新しいバージョンのデプロイにおいて、リスクを最小限に抑えたいと考えています。まず少数のユーザーに新バージョンを公開し、問題がなければ徐々にトラフィックを増やしていく手法は何と呼ばれますか？",
    "options": {
      "A": "ブルー/グリーンデプロイメント",
      "B": "ローリングアップデート",
      "C": "カナリアリリース",
      "D": "A/Bテスト"
    },
    "answer": "C",
    "explanation": "カナリアリリースは、新バージョンを一部のユーザーに先行公開し、影響を確認しながら段階的に展開する戦略です。"
  },
  {
    "id": 13,
    "category": "CI/CD",
    "question": "Cloud Buildのビルドステップで、Google Cloudの他のサービス（例: Cloud Storage, Compute Engine）と連携する必要があります。Cloud Buildサービスアカウントに必要な権限を付与する最も安全な方法はどれですか？",
    "options": {
      "A": "プロジェクト全体に対する編集者ロールを付与する。",
      "B": "必要な操作のみを許可するカスタムIAMロールを作成し、付与する。",
      "C": "サービスアカウントキーを作成し、ビルド構成ファイルに埋め込む。",
      "D": "Cloud Buildサービスアカウントにオーナーロールを付与する。"
    },
    "answer": "B",
    "explanation": "最小権限の原則に従い、必要な権限のみを持つカスタムIAMロールを作成してサービスアカウントに付与するのが最も安全です。"
  },
  {
    "id": 14,
    "category": "CI/CD",
    "question": "Cloud Deployを使用してGKEクラスタへのデプロイを管理しています。デプロイに問題があった場合に、迅速に以前の安定バージョンに戻すための最も適切なCloud Deployの機能はどれですか？",
    "options": {
      "A": "デリバリーパイプラインの再実行",
      "B": "ターゲットの削除と再作成",
      "C": "ロールバック機能",
      "D": "カナリアデプロイメントのトラフィック比率変更"
    },
    "answer": "C",
    "explanation": "Cloud Deployには、特定のリリースを以前の安定したバージョンに迅速に戻すためのロールバック機能が組み込まれています。"
  },
  {
    "id": 5,
    "category": "監視",
    "question": "アプリケーションで特定のエラーメッセージがログに出力された場合に、すぐにアラートを受け取りたいと考えています。Cloud LoggingとCloud Monitoringを使用してこれを実現する最も一般的な方法は何ですか？",
    "options": {
      "A": "Cloud Loggingでログをエクスポートし、外部の監視ツールでアラートを設定する。",
      "B": "Cloud Monitoringでカスタム指標を作成し、その指標に対するアラートを設定する。",
      "C": "Cloud Loggingでログベースの指標 (Log-based Metrics) を作成し、Cloud Monitoringでその指標に対するアラートを設定する。",
      "D": "Cloud Traceでエラー箇所を特定し、手動でアラートを設定する。"
    },
    "answer": "C",
    "explanation": "Cloud Loggingのログベース指標は、ログの内容に基づいて指標を作成し、Cloud Monitoringでアラートを設定するための標準的な方法です。"
  },
  {
    "id": 6,
    "category": "監視",
    "question": "マイクロサービスアーキテクチャを採用しており、リクエストが複数のサービスを経由する際のパフォーマンスボトルネックを特定したいと考えています。どのGoogle Cloudサービスが最も役立ちますか？",
    "options": {
      "A": "Cloud Logging",
      "B": "Cloud Monitoring",
      "C": "Cloud Trace",
      "D": "Cloud Profiler"
    },
    "answer": "C",
    "explanation": "Cloud Traceは分散トレーシングを提供し、リクエストが複数のサービスを通過する際のレイテンシやボトルネックを特定するのに役立ちます。"
  },
  {
    "id": 15,
    "category": "監視",
    "question": "公開しているWebアプリケーションのエンドポイントが外部からアクセス可能かどうかを定期的にチェックしたいと考えています。どのCloud Monitoring機能を使用するのが最も適切ですか？",
    "options": {
      "A": "カスタム指標",
      "B": "アラートポリシー",
      "C": "稼働時間チェック (Uptime Check)",
      "D": "ダッシュボード"
    },
    "answer": "C",
    "explanation": "稼働時間チェック（Uptime Check）は、指定したURL等が外部からアクセス可能か定期的に確認し、問題があればアラートを通知する機能です。"
  },
  {
    "id": 16,
    "category": "監視",
    "question": "Cloud Monitoringでアラートポリシーを作成する際に、誤検知（ノイズ）を減らすための効果的なアプローチはどれですか？",
    "options": {
      "A": "可能な限り低い閾値を設定する。",
      "B": "アラートの通知チャネルを増やす。",
      "C": "アラート条件の期間（Duration）を適切に設定し、一時的なスパイクを無視するようにする。",
      "D": "全てのアラートを最高優先度として扱う。"
    },
    "answer": "C",
    "explanation": "アラート条件の期間を設定することで、一時的な指標の変動による誤検知を減らし、持続的な問題のみを通知するようにできます。"
  },
  {
    "id": 7,
    "category": "インシデント管理",
    "question": "インシデント発生後、チームでポストモーテムを実施しました。その結果として最も重要視すべきアウトプットは何ですか？",
    "options": {
      "A": "インシデントに関与したメンバーのリストとそれぞれの役割。",
      "B": "インシデント発生から解決までの詳細なタイムライン。",
      "C": "同様のインシデントの再発を防ぐための具体的なアクションアイテムと担当者、期日。",
      "D": "インシデントによるビジネスインパクトの正確な見積もり。"
    },
    "answer": "C",
    "explanation": "ポストモーテムの最終目標は再発防止であり、具体的なアクションアイテムとその実行計画が最も重要です。"
  },
  {
    "id": 8,
    "category": "インシデント管理",
    "question": "運用チームは、重要度の低いアラートが頻繁に発生し、「アラート疲れ」の状態になっています。この問題を解決するための最も効果的なアプローチは何ですか？",
    "options": {
      "A": "全てのアラート通知を一時的に停止する。",
      "B": "アラートの閾値を見直し、本当に対応が必要な問題のみを通知するように調整する。",
      "C": "アラート対応専門のチームを新たに設立する。",
      "D": "アラートの通知先を開発チームに変更する。"
    },
    "answer": "B",
    "explanation": "アラート疲れの根本原因であるノイズを減らすために、アラートの条件や閾値を見直すことが最も効果的です。"
  },
  {
    "id": 17,
    "category": "インシデント管理",
    "question": "大規模なインシデント対応において、全体の指揮を執り、意思決定を行い、コミュニケーションを統括する役割は何と呼ばれますか？",
    "options": {
      "A": "コミュニケーションリード",
      "B": "オペレーションリード",
      "C": "インシデントコマンダー (Incident Commander)",
      "D": "サブジェクトマターエキスパート (SME)"
    },
    "answer": "C",
    "explanation": "インシデントコマンダーは、インシデント対応全体の責任者として、指揮、意思決定、コミュニケーションの中心的な役割を担います。"
  },
  {
    "id": 18,
    "category": "インシデント管理",
    "question": "効果的なポストモーテムを実施する上で、最も重要な文化的な要素は何ですか？",
    "options": {
      "A": "責任者を明確にし、ペナルティを与える文化。",
      "B": "インシデントを迅速に忘れ、次の開発に進む文化。",
      "C": "非難することなく、失敗から学び、改善を奨励する文化 (Blameless Culture)。",
      "D": "インシデントの詳細を組織外に公開しない文化。"
    },
    "answer": "C",
    "explanation": "非難のない文化（Blameless Culture）は、参加者が安心して事実を共有し、根本原因の分析と効果的な再発防止策の立案を促進するために不可欠です。"
  },
  {
    "id": 9,
    "category": "システム構築・運用",
    "question": "Terraformを使用してGoogle Cloudのインフラを管理しています。複数人で開発を進める中で、状態ファイル (tfstate) の整合性を保ち、競合を防ぐためにはどうするのがベストプラクティスですか？",
    "options": {
      "A": "状態ファイルを各開発者のローカルマシンに保存する。",
      "B": "状態ファイルをGitリポジトリで管理する。",
      "C": "Cloud StorageバケットをTerraformのバックエンドとして設定し、状態ロックを有効にする。",
      "D": "状態ファイルを手動でマージするルールを設ける。"
    },
    "answer": "C",
    "explanation": "共有バックエンド（Cloud Storageなど）と状態ロックを使用することで、複数人での安全なTerraform運用が可能になります。"
  },
  {
    "id": 10,
    "category": "システム構築・運用",
    "question": "Google Kubernetes Engine (GKE) でステートレスなWebアプリケーションを運用しています。コストを最適化しつつ、トラフィックの変動に応じてPod数を自動的に調整したい場合、どのGKE機能を有効にするのが最も適切ですか？",
    "options": {
      "A": "Horizontal Pod Autoscaler (HPA)",
      "B": "Vertical Pod Autoscaler (VPA)",
      "C": "Cluster Autoscaler",
      "D": "Node Auto-provisioning"
    },
    "answer": "A",
    "explanation": "HPAは、メトリクスに基づいてPod数を自動調整するため、ステートレスアプリケーションの負荷変動に対応するのに適しています。"
  },
  {
    "id": 19,
    "category": "システム構築・運用",
    "question": "Terraformのコードを再利用可能にし、インフラ構成の標準化を促進するために推奨される方法はどれですか？",
    "options": {
      "A": "全てのリソースを単一の .tf ファイルに記述する。",
      "B": "Terraformモジュールを作成し、利用する。",
      "C": "各環境（開発、ステージング、本番）ごとにコードをコピー＆ペーストする。",
      "D": "シェルスクリプトでTerraformコマンドをラップする。"
    },
    "answer": "B",
    "explanation": "Terraformモジュールは、関連するリソース群を一つの単位として定義し、再利用可能にするための仕組みです。"
  },
  {
    "id": 20,
    "category": "システム構築・運用",
    "question": "GKEクラスタ内のPod間の通信を制御し、特定のPodからのトラフィックのみを許可するなど、ネットワークセキュリティを強化したい場合、どのKubernetesリソースを使用しますか？",
    "options": { "A": "Service", "B": "Ingress", "C": "NetworkPolicy", "D": "ConfigMap" },
    "answer": "C",
    "explanation": "NetworkPolicyリソースを使用すると、Podレベルでのネットワークアクセスルールを定義できます。"
  },
  {
    "id": 21,
    "category": "システム構築・運用",
    "question": "複数のアプリケーションチームが独立して開発を進められるように、Google Cloudのリソース階層を設計しています。各チームに専用のプロジェクトを割り当て、共通のネットワーク設定やIAMポリシーを適用するための最適な方法はどれですか？",
    "options": {
      "A": "全てのチームのリソースを単一のプロジェクトにまとめる。",
      "B": "各チームのプロジェクトを組織直下に配置し、個別にポリシーを設定する。",
      "C": "組織の下に共通のポリシーを持つフォルダを作成し、その中に各チームのプロジェクトを配置する。",
      "D": "共有VPCを使用せず、各プロジェクトで独立したネットワークを構築する。"
    },
    "answer": "C",
    "explanation": "フォルダを使用すると、関連するプロジェクトをグループ化し、共通のIAMポリシーや組織ポリシーを効率的に適用できます。これにより、管理オーバーヘッドを削減しつつ、チームごとの分離を保つことができます。"
  },
  {
    "id": 22,
    "category": "システム構築・運用",
    "question": "Google Cloudのインフラストラクチャをコード (IaC) で管理したいと考えています。KubernetesリソースとGoogle Cloudリソースの両方を宣言的に管理し、GitOpsワークフローと親和性が高いツールはどれですか？",
    "options": {
      "A": "Cloud Deployment Manager",
      "B": "Terraform",
      "C": "Config Connector",
      "D": "Helm"
    },
    "answer": "C",
    "explanation": "Config Connectorは、Kubernetesカスタムリソース(CRD) を使用してGoogle Cloudリソースを管理できるようにするツールです。これにより、Kubernetesネイティブな方法でインフラ全体を管理でき、GitOpsツール（例: ArgoCD）との連携が容易になります。Terraformも強力ですが、Kubernetesリソースとの統合管理はConfig Connectorの方がシームレスです。"
  },
  {
    "id": 23,
    "category": "CI/CD",
    "question": "開発チームがセキュアなクラウド開発環境を迅速に利用開始できるようにしたいと考えています。事前設定されたIDE、ツール、セキュリティポリシーを含むカスタム開発環境を提供するための最適なGoogle Cloudサービスはどれですか？",
    "options": {
      "A": "Cloud Shell",
      "B": "Compute Engine VMに手動で設定",
      "C": "Cloud Workstations",
      "D": "App Engine"
    },
    "answer": "C",
    "explanation": "Cloud Workstationsは、管理者が定義した構成（カスタムイメージ、IDE、ツールなど）に基づいて、セキュアで一貫性のあるクラウドベースの開発環境を開発者に提供できるマネージドサービスです。"
  },
  {
    "id": 24,
    "category": "CI/CD",
    "question": "CI/CDパイプラインで生成されたコンテナイメージや言語パッケージを一元管理し、脆弱性スキャンやアクセス制御を行いたい場合、どのGoogle Cloudサービスが最も適していますか？",
    "options": {
      "A": "Cloud Storage",
      "B": "Artifact Registry",
      "C": "Container Registry",
      "D": "Cloud Source Repositories"
    },
    "answer": "B",
    "explanation": "Artifact Registryは、コンテナイメージ、Maven/npmなどの言語パッケージ、OSパッケージなどをサポートするフルマネージドなリポジトリサービスです。脆弱性スキャン、IAMベースのアクセス制御、リージョンリポジトリなどの機能を提供します。(Container Registryは古いサービスです)"
  },
  {
    "id": 25,
    "category": "CI/CD",
    "question": "アプリケーションのデプロイプロセスにおいて、データベーススキーマの変更や本番環境へのアクセスキーなど、機密性の高い情報を安全に管理し、CI/CDパイプラインから参照する必要があります。どのサービスの組み合わせが最も推奨されますか？",
    "options": {
      "A": "環境変数に直接埋め込む",
      "B": "Cloud Storageバケットに平文で保存する",
      "C": "Secret ManagerとCloud Key Management Service (KMS)",
      "D": "Gitリポジトリに暗号化してコミットする"
    },
    "answer": "C",
    "explanation": "Secret Managerは、APIキー、パスワード、証明書などのシークレットを安全に保存、管理、アクセスするためのサービスです。必要に応じてCloud KMSと連携してエンベロープ暗号化を使用することも可能です。CI/CDパイプラインからIAM権限に基づいて安全にシークレットを取得できます。"
  },
  {
    "id": 26,
    "category": "CI/CD",
    "question": "ソフトウェアサプライチェーンのセキュリティを強化するため、GKEへのデプロイ時に、信頼できるCI/CDシステムによってビルドされ、脆弱性スキャンをパスしたコンテナイメージのみを許可したいと考えています。どの技術の組み合わせがこれを実現しますか？",
    "options": {
      "A": "Cloud Audit Logs と Cloud Monitoring",
      "B": "Binary Authorization と Artifact Registry (脆弱性スキャン)",
      "C": "Network Policy と Service Mesh",
      "D": "Cloud Armor と Cloud Load Balancing"
    },
    "answer": "B",
    "explanation": "Binary Authorizationは、デプロイ時にコンテナイメージが特定のポリシー（例: 特定の認証者による署名、Artifact Registryでの脆弱性スキャン結果）を満たしていることを強制するサービスです。これにより、信頼できないイメージのデプロイを防ぎ、サプライチェーンのセキュリティを強化します。"
  },
  {
    "id": 27,
    "category": "SRE",
    "question": "サービスのSLOを定義した後、エラーバジェットの消費率に基づいてアラートを設定したいと考えています。これにより、SLO違反のリスクが高まった際に早期に対応できます。このアラートはどのGoogle Cloud Monitoring機能を使用して設定するのが最も適切ですか？",
    "options": {
      "A": "ログベースの指標アラート",
      "B": "稼働時間チェックアラート",
      "C": "カスタム指標アラート",
      "D": "SLOバーンレートアラート"
    },
    "answer": "D",
    "explanation": "Cloud Monitoringでは、SLOに基づいてエラーバジェットの消費速度（バーンレート）を監視し、設定した閾値を超えた場合にアラートを発生させる機能（SLOバーンレートアラート）が提供されています。これにより、SLO違反を未然に防ぐためのプロアクティブな対応が可能になります。"
  },
  {
    "id": 28,
    "category": "インシデント管理",
    "question": "特定のゾーンで障害が発生し、そのゾーンで実行されているアプリケーションインスタンスへのトラフィックを迅速に停止して、他の正常なゾーンのインスタンスに振り分ける必要があります。Cloud Load Balancingを使用している場合、最も効果的な方法はどれですか？",
    "options": {
      "A": "障害が発生したゾーンのVMインスタンスを手動で停止する。",
      "B": "ロードバランサーのヘルスチェックを利用して、異常なインスタンスを自動的に切り離すように設定する。",
      "C": "DNSレコードを変更して、障害ゾーンのIPアドレスを削除する。",
      "D": "ファイアウォールルールを作成して、障害ゾーンへのトラフィックをブロックする。"
    },
    "answer": "B",
    "explanation": "Cloud Load Balancingのヘルスチェックは、バックエンドインスタンスの状態を定期的に監視し、ヘルスチェックに失敗したインスタンスを自動的にローテーションから除外します。これにより、障害発生時に手動介入なしで迅速にトラフィックを正常なインスタンスに振り分けることができます（トラフィックドレイン）。"
  },
  {
    "id": 29,
    "category": "監視",
    "question": "アプリケーションログにユーザーの個人情報（PII）が含まれる可能性があるため、Cloud Loggingに取り込む前にマスキング処理を行いたいと考えています。これを実現するための最も適切な方法はどれですか？",
    "options": {
      "A": "ログエージェントの設定でPIIパターンに一致する部分をマスキングする。",
      "B": "ログエクスポート先のBigQueryでSQLを使用してマスキングする。",
      "C": "Cloud Data Loss Prevention (DLP) APIをログ処理パイプラインに組み込む。",
      "D": "アプリケーションコード内で手動でマスキング処理を実装する。"
    },
    "answer": "C",
    "explanation": "Cloud Data Loss Prevention (DLP) は、機密データを検出、分類、マスキングするための強力なサービスです。ログエントリをDLP APIに送信してPIIを検出しマスキング処理を行うパイプラインを構築することで、コンプライアンス要件を満たすことができます。ログエージェントでの単純なパターンマスキングも可能ですが、DLPの方がより高度な検出と処理を提供します。"
  },
  {
    "id": 30,
    "category": "監視",
    "question": "ユーザーが実際に体験するアプリケーションのパフォーマンス（例: ログインプロセス、商品購入フロー）を定期的にシミュレートし、問題をプロアクティブに検出したいと考えています。どのCloud Monitoring機能がこの目的に最も適していますか？",
    "options": {
      "A": "稼働時間チェック (Uptime Check)",
      "B": "カスタム指標",
      "C": "合成モニタリング (Synthetic Monitoring)",
      "D": "ログベースの指標"
    },
    "answer": "C",
    "explanation": "合成モニタリングは、ユーザーの操作フローを模倣したスクリプト（例: Puppeteer）を実行し、アプリケーションの可用性やパフォーマンスをエンドツーエンドでテストする機能です。これにより、実際のユーザー影響が出る前に問題を検出できます。稼働時間チェックは単純なエンドポイントの死活監視が主目的です。"
  },
  {
    "id": 31,
    "category": "監視",
    "question": "本番環境で断続的に発生するアプリケーションのレイテンシ問題を調査しています。特定のリクエストがどのマイクロサービスで時間を要しているかを詳細に追跡し、ボトルネックを特定したい場合、どのGoogle Cloudデバッグツールが最も役立ちますか？",
    "options": {
      "A": "Cloud Logging",
      "B": "Cloud Profiler",
      "C": "Error Reporting",
      "D": "Cloud Trace"
    },
    "answer": "D",
    "explanation": "Cloud Traceは分散トレーシングを提供し、リクエストがシステム内の複数のサービスをどのように伝播し、各スパンでどれだけの時間がかかったかを可視化します。これにより、複雑なマイクロサービスアーキテクチャにおけるレイテンシのボトルネック特定に非常に有効です。"
  },
  {
    "id": 32,
    "category": "システム構築・運用",
    "question": "Compute Engineインスタンスの運用コストを削減したいと考えています。Google Cloud Recommenderから「アイドル状態のVMインスタンス」に関する推奨が表示されました。この推奨に対して取るべき最も適切なアクションは何ですか？",
    "options": {
      "A": "推奨を無視し、インスタンスをそのまま稼働させ続ける。",
      "B": "推奨されるインスタンスタイプにサイズ変更する。",
      "C": "インスタンスが本当に不要か確認し、不要であれば停止または削除する。",
      "D": "インスタンスをSpot VMに変換する。"
    },
    "answer": "C",
    "explanation": "Google Cloud Recommenderは、コスト、セキュリティ、パフォーマンスなどの観点から最適化の提案を行いますが、最終的な判断はユーザーが行う必要があります。「アイドル状態」の推奨は、そのインスタンスが長期間使用されていない可能性を示唆しているため、本当に不要かどうかを確認し、不要であればリソースを解放（停止または削除）することがコスト削減に繋がります。"
  }
]
